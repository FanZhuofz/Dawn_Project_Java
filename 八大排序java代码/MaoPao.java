package xyz.dawnfan.pxdemo;

/**
 * 冒泡排序
 * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。  
 * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  
 * 针对所有的元素重复以上的步骤，除了最后一个。
 * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 
 * @param numbers 需要排序的整型数组
 */
public class MaoPao {

	/**
	 * 	原序列： 49 38 65 97 76 13 27 49 89 86 57
	 *  第一次： 38 49 65 76 13 27 49 89 86 57 97
	 *  第二次： 38 49 65 13 27 49 76 86 57 89 97
	 *  第三次： 38 49 13 27 49 65 76 57 86 89 97
	 *  第四次： 38 13 27 49 49 65 57 76 86 89 97
	 *  第五次： 13 27 38 49 49 57 65 76 86 89 97
	 *  第六次： 13 27 38 49 49 57 65 76 86 89 97
	 *  
	 * @param numbers
	 */
	public static void bubbleSort(int[] numbers)
	{
	    int temp = 0;
	    for(int i=0;i<numbers.length-1;i++)
	    {
	    for(int j=0;j<numbers.length-1-i;j++)
	    {
	        if(numbers[j] > numbers[j+1])  //交换两数位置
	        {
	        temp = numbers[j];
	        numbers[j] = numbers[j+1];
	        numbers[j+1] = temp;
	        }
	    }
	    }
	}
	public static void main(String[] args) {
		int numbers[] =new int[]{49,38,65,97,76,13,27,49,89,86,57};
		MaoPao.bubbleSort(numbers);
		for(int arr:numbers){
			System.out.print(arr+" ");
		}
	}
}